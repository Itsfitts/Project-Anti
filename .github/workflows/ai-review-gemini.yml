name: AI Code Review - Gemini

# This workflow triggers on pull requests that are opened, have new commits pushed, or have a specific label added.
on:
  pull_request:
    types: [opened, synchronize, labeled]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  gemini_code_reviewer:
    name: Gemini AI Code Review
    # This job will run if the PR is opened, synchronized, or if the 'gemini-ai' label is added.
    if: |
      github.event.action == 'opened' ||
      github.event.action == 'synchronize' ||
      (github.event.action == 'labeled' && github.event.label.name == 'gemini-ai') ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Run code analysis
        id: analysis
        run: |
          if ! node ./scripts/analyze.js > analysis-report.txt; then
            echo "Analysis script failed, but continuing with basic report..." >&2
            echo "Basic analysis report: Project structure could not be fully analyzed due to script errors." > analysis-report.txt
          fi
          echo "Analysis report size: $(wc -c < analysis-report.txt) bytes"
      
      # Step 7: Validate API key and send the analysis report to the Gemini API
      - name: Validate API key and get Gemini suggestions
        id: ai_suggestions
        run: |
          # Check if API key is set
          if [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
            echo "GEMINI_API_KEY secret is not configured" >&2
            echo '{"error": {"message": "GEMINI_API_KEY secret is not configured. Please add it in repository Settings > Secrets and variables > Actions"}}' > ai-response.json
            exit 0
          fi
          
          # Validate API key format (should be a long string starting with expected pattern)
          API_KEY="${{ secrets.GEMINI_API_KEY }}"
          if [ ${#API_KEY} -lt 30 ]; then
            echo "GEMINI_API_KEY appears to be too short or invalid" >&2
            echo '{"error": {"message": "GEMINI_API_KEY appears to be invalid (too short). Please verify your API key from Google AI Studio"}}' > ai-response.json
            exit 0
          fi
          
          # Read the analysis report content from the file.
          REPORT_CONTENT=$(cat analysis-report.txt)
          
          # Construct the JSON payload for the Gemini API.
          JSON_PAYLOAD=$(jq -n --arg content "$REPORT_CONTENT" \
            '{
              "contents": [{
                "parts": [{
                  "text": "You are an expert code reviewer for Android/Kotlin and Node.js projects. Please analyze the following report and provide concise, actionable suggestions for improvement in markdown format. Focus on code quality, security, performance, and best practices. Here is the analysis report:\n\n\($content)"
                }]
              }]
            }')

          # Test API connectivity first with a minimal request
          echo "Testing Gemini API connectivity..."
          TEST_PAYLOAD='{"contents": [{"parts": [{"text": "test"}]}]}'
          
          # Make a test API call to validate authentication
          if ! curl -s -w "%{http_code}" "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent" \
            -H "Content-Type: application/json" \
            -H "x-api-key: $API_KEY" \
            -d "$TEST_PAYLOAD" \
            -o test-response.json > test_http_code.txt; then
            echo "Failed to connect to Gemini API" >&2
            echo '{"error": {"message": "Network error: Failed to connect to Gemini API. Check your internet connection and API endpoint availability"}}' > ai-response.json
            exit 0
          fi
          
          TEST_HTTP_CODE=$(cat test_http_code.txt)
          echo "Test API call HTTP response code: $TEST_HTTP_CODE"
          
          if [ "$TEST_HTTP_CODE" -eq 403 ]; then
            echo "Authentication failed - HTTP 403" >&2
            echo '{"error": {"message": "Authentication failed (HTTP 403). Your GEMINI_API_KEY is invalid, expired, or lacks required permissions. Please regenerate your API key at https://makersuite.google.com/app/apikey"}}' > ai-response.json
            exit 0
          elif [ "$TEST_HTTP_CODE" -eq 429 ]; then
            echo "API quota exceeded - HTTP 429" >&2
            echo '{"error": {"message": "API quota exceeded (HTTP 429). You have reached your Gemini API usage limits. Please check your quota at Google AI Studio or try again later"}}' > ai-response.json
            exit 0
          elif [ "$TEST_HTTP_CODE" -ne 200 ]; then
            TEST_RESPONSE=$(cat test-response.json 2>/dev/null || echo "No response body")
            echo "API test failed with HTTP $TEST_HTTP_CODE" >&2
            echo "{\"error\": {\"message\": \"API test failed with HTTP $TEST_HTTP_CODE. Response: $TEST_RESPONSE\"}}" > ai-response.json
            exit 0
          fi
          
          echo "API key validation successful, proceeding with full analysis..."

          # Make the main API call using curl and save the response.
          if ! curl -s -w "%{http_code}" "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent" \
            -H "Content-Type: application/json" \
            -H "x-api-key: $API_KEY" \
            -d "$JSON_PAYLOAD" \
            -o ai-response.json > http_code.txt; then
            echo "Main API call failed" >&2
            echo '{"error": {"message": "Network error during main API call to Gemini API"}}' > ai-response.json
          else
            HTTP_CODE=$(cat http_code.txt)
            echo "Main Gemini API HTTP response code: $HTTP_CODE"
            if [ "$HTTP_CODE" -ne 200 ]; then
              RESPONSE_BODY=$(cat ai-response.json 2>/dev/null || echo "No response body")
              echo "Main API call failed with HTTP $HTTP_CODE" >&2
              echo "{\"error\": {\"message\": \"Main API call failed with HTTP $HTTP_CODE\", \"response\": \"$RESPONSE_BODY\"}}" > ai-response.json
            fi
          fi
          
          # Clean up temporary files
          rm -f test-response.json test_http_code.txt

      # Step 8: Post the Gemini suggestions as a comment on the pull request
      - name: Post Gemini suggestions to PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the AI response
            let aiResponse;
            let responseJson;
            
            try {
              aiResponse = fs.readFileSync('ai-response.json', 'utf8');
              responseJson = JSON.parse(aiResponse);
            } catch (error) {
              const errorBody = "## 🤖 GitAuto-AI Review (Gemini)\n\n❌ **Error**: Failed to parse AI response.\n\n**Technical Details**: " + error.message + "\n\n🔧 **Possible Causes**:\n- The Gemini API may be unavailable or experiencing issues\n- Network connectivity problems during API call\n- Malformed response from the API\n\n**Troubleshooting Steps**:\n1. **Wait and Retry**: Try triggering the workflow again in a few minutes\n2. **Check API Status**: Visit [Google Cloud Status](https://status.cloud.google.com/)\n3. **Verify API Key**: Ensure GEMINI_API_KEY is correctly configured in GitHub Secrets\n4. **API Key Setup**: If not configured, see [setup instructions](../README.md#ai-code-review-setup)\n\n---\n*This is typically a temporary issue. Please try again later.*";
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: errorBody
              });
              return;
            }
            
            // Check if the response has the expected structure
            if (!responseJson.candidates || responseJson.candidates.length === 0) {
              let errorDetails = "Invalid API response structure";
              let troubleshootingSteps = [];
              
              if (responseJson.error) {
                errorDetails = "API Error: " + (responseJson.error.message || 'Unknown error');
                
                // Provide specific troubleshooting based on error message
                if (responseJson.error.message.includes("GEMINI_API_KEY secret is not configured")) {
                  troubleshootingSteps = [
                    "🔑 **Configure GEMINI_API_KEY Secret**:",
                    "   1. Go to repository **Settings > Secrets and variables > Actions**",
                    "   2. Click **New repository secret**", 
                    "   3. Name: `GEMINI_API_KEY`",
                    "   4. Value: Your API key from [Google AI Studio](https://makersuite.google.com/app/apikey)",
                    "",
                    "📚 **How to get a Gemini API Key**:",
                    "   1. Visit [Google AI Studio](https://makersuite.google.com/app/apikey)",
                    "   2. Sign in with your Google account",
                    "   3. Click **Create API Key**",
                    "   4. Copy the generated key and add it as a GitHub secret"
                  ];
                } else if (responseJson.error.message.includes("invalid") || responseJson.error.message.includes("403")) {
                  troubleshootingSteps = [
                    "🔑 **API Key Issues**:",
                    "   - Your API key may be expired, invalid, or lack permissions",
                    "   - **Regenerate your API key**: Visit [Google AI Studio](https://makersuite.google.com/app/apikey)",
                    "   - **Update the secret**: Go to Settings > Secrets and variables > Actions",
                    "",
                    "🔍 **Verification Steps**:",
                    "   1. Ensure the API key is correctly copied (no extra spaces)",
                    "   2. Verify the key has access to Gemini API",
                    "   3. Check if your Google Cloud project has billing enabled (if required)"
                  ];
                } else if (responseJson.error.message.includes("quota") || responseJson.error.message.includes("429")) {
                  troubleshootingSteps = [
                    "📊 **API Quota Exceeded**:",
                    "   - You've reached your Gemini API usage limits",
                    "   - **Check quotas**: Visit [Google AI Studio](https://makersuite.google.com/app/apikey) or Google Cloud Console",
                    "   - **Wait and retry**: Quotas typically reset daily",
                    "",
                    "💡 **Solutions**:",
                    "   1. Wait for quota reset (usually 24 hours)",
                    "   2. Upgrade your Google Cloud billing plan if needed",
                    "   3. Consider using a different API key with available quota"
                  ];
                } else {
                  troubleshootingSteps = [
                    "🔧 **General Troubleshooting**:",
                    "   1. **Verify API Key**: Ensure GEMINI_API_KEY is correctly configured in GitHub Secrets",
                    "   2. **Check API Status**: Visit [Google Cloud Status](https://status.cloud.google.com/)",
                    "   3. **Regenerate Key**: Create a new API key at [Google AI Studio](https://makersuite.google.com/app/apikey)",
                    "   4. **Verify Permissions**: Ensure your Google account has access to Gemini API"
                  ];
                }
              } else {
                troubleshootingSteps = [
                  "🔧 **API Response Issues**:",
                  "   1. The Gemini API returned an unexpected response format",
                  "   2. This might be a temporary service issue",
                  "   3. **Try again**: Trigger the workflow again in a few minutes",
                  "   4. **Check API Status**: Visit [Google Cloud Status](https://status.cloud.google.com/)"
                ];
              }
              
              const errorBody = "## 🤖 GitAuto-AI Review (Gemini)\n\n❌ **Error**: " + errorDetails + "\n\n" + 
                troubleshootingSteps.join("\n") + "\n\n" +
                "**Response received**: \n```json\n" + JSON.stringify(responseJson, null, 2) + "\n```\n\n" +
                "---\n*Need help? Check the [README.md](../README.md#ai-code-review-setup) for detailed setup instructions.*";
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: errorBody
              });
              core.setFailed('Invalid Gemini API response');
              return;
            }

            // Extract suggestions from the API response
            const suggestions = responseJson.candidates[0].content.parts[0].text;
            const body = "## 🤖 GitAuto-AI Code Review (via Gemini)\n\n" + suggestions + "\n\n---\n*This review was automatically generated using Google's Gemini AI. Please review the suggestions carefully and use your judgment when implementing changes.*";

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
